package ca.poffm.graphql.todo.service;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.stereotype.Component;

import ca.poffm.graphql.todo.model.Task;
import ca.poffm.graphql.todo.paging.ConnectionArgs;
import ca.poffm.graphql.todo.paging.ConnectionWithTotal;
import ca.poffm.graphql.todo.paging.JpaConnectionWithTotal;
import ca.poffm.graphql.todo.paging.JpaConnectionOptions;
import graphql.relay.Edge;
import io.leangen.graphql.annotations.GraphQLArgument;
import io.leangen.graphql.annotations.GraphQLQuery;

/**
 * This GraphQL API's query root.
 * 
 * @author PoffM
 */
@Component
public class QueryRoot {
  
  @PersistenceContext EntityManager entityManager;
  
  @GraphQLQuery
  public Task task(Long id) {
    return entityManager.find(Task.class, id);
  }
  
  @GraphQLQuery
  public ConnectionWithTotal<Edge<Task>> myTasks(
      @GraphQLArgument(name = "first") Integer first,
      @GraphQLArgument(name = "after") String after,
      @GraphQLArgument(name = "last") Integer last,
      @GraphQLArgument(name = "before") String before
  ) {
    return new JpaConnectionWithTotal<>(
        Task.class, entityManager,
        ConnectionArgs.builder().first(first).after(after).last(last).before(before).build(),
        JpaConnectionOptions.builder()
          .queryConfig((query, cb, root) -> query.where(cb.equal(root.get("autoGeneratedExample"), false)))
          .build()
        );
  }
  
  @GraphQLQuery
  public ConnectionWithTotal<Edge<Task>> exampleTasks(
      @GraphQLArgument(name = "first") Integer first,
      @GraphQLArgument(name = "after") String after,
      @GraphQLArgument(name = "last") Integer last,
      @GraphQLArgument(name = "before") String before
  ) {
    return new JpaConnectionWithTotal<>(
        Task.class, entityManager,
        ConnectionArgs.builder().first(first).after(after).last(last).before(before).build(),
        JpaConnectionOptions.builder()
          .queryConfig((query, cb, root) -> query.where(cb.equal(root.get("autoGeneratedExample"), true)))
          .build()
        );
  }
  
}
