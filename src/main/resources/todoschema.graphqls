schema {
  query: Query
  mutation: Mutation
}

type Query {
  task(id: Int!): Task
  myTasks(first: Int, last: Int, before: String, after: String): TaskConnection
  exampleTasks(first: Int, last: Int, before: String, after: String): TaskConnection
}

type Mutation {
  createTask(input: CreateTaskInput!): CreateTaskPayload
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload
  deleteTask(input: DeleteTaskInput!): DeleteTaskPayload
}

type Task {
  id: Int!
  name: String!
  description: String
  dueDate: Boolean
  done: Boolean!
  autoGeneratedExample: Boolean!
  created: String!
  updated: String!
}

type TaskConnection {
  edges: [TaskEdge]
  pageInfo: PageInfo
  totalCount: Int!
}

type TaskEdge {
  cursor: String!
  node: Task
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input CreateTaskInput {
  name: String!
  description: String
  dueDate: Boolean
}

type CreateTaskPayload {
  clientMutationId: String
  task: Task!
}

input UpdateTaskInput {
  id: Int!
  name: String
  description: String
  dueDate: Boolean
}

type UpdateTaskPayload {
  clientMutationId: String
  task: Task!
}

input DeleteTaskInput {
  id: Int!
}

type DeleteTaskPayload {
  clientMutationId: String
}